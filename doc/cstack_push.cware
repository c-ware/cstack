.TH "CSTACK_PUSH" "cware" "April 16th, 2022" "" "C-Ware Manual"

.SH NAME
cstack_push - push a value to the top of the stack

.SH SYNOPSIS
.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/cstack/cstack.h>

.BI "#define cstack_push(" "stack" ", " "value" ", " "namespace" ");"

.SH DESCRIPTION
Pushes a value to the top of the stack. If the stack is full, then it will be
resized to double its current capacity. However, if its in stack mode, and the
stack is full when pushing something, it will error and exit the program
instead of resising it.

This macro will print an error message to the stderr and exit the program if
any of the following conditions are met:
.RS
.IP \[bu] 0.4i
Attempting to push to a full stack in stack mode
.RE

.I stack
will be the stack to push to
.br
.I value
will be the value to push to the top of the stack
.br
.I namespace
will be the namespace of the stack settings to use

.SH EXAMPLES
/*
 * This example showcases how to use the
.B cstack_init
function.
.br
*/

#include <stdlib.h>
.br
#include <cware/cstack/cstack.h>

#define STRING_STACK_TYPE char*
.br
#define STRING_STACK_FREE(value) /* Strings are in ROM; cannot free */
.br
#define STRING_STACK_HEAP 1      /* Should be allocated using heap memory */

struct StringStack {
.br
    char **contents;
.br
    int length;
.br
    int capacity;
.br
};

int main(void) {
.br
    struct StringStack *new_stack = NULL;
.br

    /* Initialise heap-based stack */
.br
    new_stack = cstack_init(new_stack, STRING_STACK);
.br

    /* Push some values to the top of the stack */
.br
    cstack_push(new_stack, "foo", STRING_STACK);
.br
    cstack_push(new_stack, "bar", STRING_STACK);
.br
    cstack_push(new_stack, "baz", STRING_STACK);
.br

    return EXIT_SUCCESS;
.br
}

.SH SEE ALSO
.BR cware (cware),
.BR cstack (cware)
