.TH "CSTACK_INIT" "cware" "April 16th, 2022" "" "C-Ware Manual"

.SH NAME
cstack_init - initialise a stack on the heap

.SH SYNOPSIS
.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/cstack/cstack.h>

.BI "#define cstack_init(" "stack" ", " "namespace" ");"

.SH DESCRIPTION
Initialises a new stack on the heap. The resulting stack must be released from
memory at the end of the program. The stack can also grow as more items are
inserted into it.

This function has no error conditions.

.I stack
will be the variable to load the stack into
.br
.I buffer
will be the stack buffer to use
.br
.I capacity
will be the maximum capacity of the buffer
.br
.I namespace
will be the namespace of the stack settings to use

.SH EXAMPLES
/*
 * This example showcases how to use the
.B cstack_init
function.
.br
*/

#include <stdlib.h>
.br
#include <cware/cstack/cstack.h>

#define STRING_STACK_TYPE char*
.br
#define STRING_STACK_FREE(value) /* Strings are in ROM; cannot free */
.br
#define STRING_STACK_HEAP 1      /* Should be allocated using heap memory */

struct StringStack {
.br
    char **contents;
.br
    int length;
.br
    int capacity;
.br
};

int main(void) {
.br
    struct StringStack *new_stack = NULL;
.br

    /* Initialise heap-based stack */
.br
    new_stack = cstack_init(new_stack, STRING_STACK);
.br

    /* Remember to free the heap stack! */
.br

    return EXIT_SUCCESS;
.br
}

.SH SEE ALSO
.BR cware (cware),
.BR cstack (cware)
