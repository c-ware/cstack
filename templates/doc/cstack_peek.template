.TH "CSTACK_PEEK" "cware" "April 16th, 2022" "" "C-Ware Manual"

.SH NAME
cstack_peek - retrieve the element at the top of the stack

.SH SYNOPSIS
.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/cstack/cstack.h>

.BI "#define cstack_peek(" "stack" ", " "namespace" ");"

.SH DESCRIPTION
The
.B cstack_peek
macro will retrieve the element at the top of the stack, and return it.

This macro has no error conditions.

.I stack
will be the stack to retrieve the top of
.I namespace
will be the stack namespace to use

.SH EXAMPLES
/*
 * This example showcases how to use the
.B cstack_peek
macro.
.br
*/

#include <stdio.h>
.br
#include <stdlib.h>
.br
#include <cware/cstack/cstack.h>

#define STRING_STACK_TYPE char*
.br
#define STRING_STACK_FREE(value) /* Strings are in ROM; cannot free */
.br
#define STRING_STACK_HEAP 0      /* Should be allocated using heap memory */

struct StringStack {
.br
    char **contents;
.br
    int length;
.br
    int capacity;
.br
};

int main(void) {
.br
    struct StringStack *new_stack = cstack_init(new_stack, STRING_STACK);
.br

    /* Throw some stuff onto the stack */
    cstack_push(new_stack, "foo", STRING_STACK);
.br
    cstack_push(new_stack, "bar", STRING_STACK);
.br
    cstack_push(new_stack, "baz", STRING_STACK);
.br
    cstack_push(new_stack, "tuna", STRING_STACK);
.br

    /* First item should be 'tuna' */
.br
    printf("%s\\n", cstack_peek(new_stack));
.br

    /* Release it */
.br
    cstack_free(new_stack, STRING_STACK);
.br

    return EXIT_SUCCESS;
.br
}

.SH SEE ALSO
.BR cware (cware),
.BR cstack (cware)
