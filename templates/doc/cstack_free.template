.TH "CSTACK_FREE" "cware" "April 16th, 2022" "" "C-Ware Manual"

.SH NAME
cstack_free - release a stack and its contents from memory

.SH SYNOPSIS
.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/cstack/cstack.h>

.BI "#define cstack_free(" "stack" ", " "namespace" ");"

.SH DESCRIPTION
Releases a stack from memory, invoking the
.B _FREE
macro function associated with the namespace on each value. If this macro is
ran in heap mode, then it will also free the stack and the stack's contents
buffer. However, if ran in stack mode, it will only release each element in the
stack, as opposed to freeing the stack structure itself, its contents buffer,
and each element.

This macro will print an error message to the stderr and exit the program if
any of the following conditions are met:
.RS
.IP \[bu] 0.4i
Attempting to free a stack with a
.B NULL
contents buffer

Attempting to free a
.B NULL
stack
.RE

.I stack
will be the variable to free
.br
.I namespace
will be the namespace of the stack settings to use

.SH EXAMPLES
/*
 * This example showcases how to use the
.B cstack_free
macro.
.br
*/

#include <stdlib.h>
.br
#include <cware/cstack/cstack.h>

#define STRING_STACK_TYPE char*
.br
#define STRING_STACK_FREE(value) /* Strings are in ROM; cannot free */
.br
#define STRING_STACK_HEAP 0      /* Should be allocated using heap memory */

struct StringStack {
.br
    char **contents;
.br
    int length;
.br
    int capacity;
.br
};

int main(void) {
.br
    char *strings[4] = {0};
.br
    struct StringStack *new_stack = cstack_init(new_stack, STRING_STACK);
.br

    /* Initialise heap-based stack */
.br
    new_stack = cstack_init(new_stack, STRING_STACK);
.br

    /* Throw some stuff onto the stack */
.br
    cstack_push(new_stack, "foo", STRING_STACK);
.br
    cstack_push(new_stack, "bar", STRING_STACK);
.br
    cstack_push(new_stack, "baz", STRING_STACK);
.br
    cstack_push(new_stack, "tuna", STRING_STACK);

    /* Release it */
.br
    cstack_free(new_stack, STRING_STACK);
.br

    return EXIT_SUCCESS;
.br
}

.SH SEE ALSO
.BR cware (cware),
.BR cstack (cware)
